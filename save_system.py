#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
"""

import os
import shutil
import json
import subprocess
from pathlib import Path
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = Path(f"backups/system_backup_{timestamp}")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ {backup_dir}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    files_to_backup = [
        "simple_api.py",
        "simple_dashboard.py", 
        "analysis_summary.md",
        "README_ANALYSIS.md",
        "requirements_unified.txt",
        "Makefile_unified",
        "taxonomy.yaml"
    ]
    
    for file in files_to_backup:
        if Path(file).exists():
            shutil.copy2(file, backup_dir / file)
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    dirs_to_backup = [
        "artifacts",
        "app",
        "api", 
        "dashboard",
        "config",
        "adapters",
        "migration",
        "quality",
        "pipeline"
    ]
    
    for dir_name in dirs_to_backup:
        if Path(dir_name).exists():
            shutil.copytree(dir_name, backup_dir / dir_name, dirs_exist_ok=True)
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
    backup_info = {
        "timestamp": timestamp,
        "backup_dir": str(backup_dir),
        "files": files_to_backup,
        "directories": dirs_to_backup,
        "system_status": "working"
    }
    
    with open(backup_dir / "backup_info.json", "w", encoding="utf-8") as f:
        json.dump(backup_info, f, indent=2, ensure_ascii=False)
    
    logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
    return backup_dir

def create_deployment_package():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    package_dir = Path(f"deployment/dialogs_rag_system_{timestamp}")
    package_dir.mkdir(parents=True, exist_ok=True)
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ {package_dir}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã
    core_files = [
        "simple_api.py",
        "simple_dashboard.py",
        "analysis_summary.md",
        "README_ANALYSIS.md",
        "requirements_unified.txt",
        "Makefile_unified",
        "taxonomy.yaml",
        ".env.example"
    ]
    
    for file in core_files:
        if Path(file).exists():
            shutil.copy2(file, package_dir / file)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–∫–µ—Ç: {file}")
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    core_dirs = [
        "app",
        "config",
        "adapters", 
        "migration",
        "quality"
    ]
    
    for dir_name in core_dirs:
        if Path(dir_name).exists():
            shutil.copytree(dir_name, package_dir / dir_name, dirs_exist_ok=True)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
    create_startup_scripts(package_dir)
    
    # –°–æ–∑–¥–∞–µ–º README –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    create_deployment_readme(package_dir)
    
    logger.info(f"–ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {package_dir}")
    return package_dir

def create_startup_scripts(package_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Unix/Linux/macOS
    start_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
if ! command -v python &> /dev/null; then
    echo "‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install -r requirements_unified.txt

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p logs artifacts data/input data/processed data/duckdb

# –ó–∞–ø—É—Å–∫–∞–µ–º API
echo "üîå –ó–∞–ø—É—Å–∫ API..."
python simple_api.py &
API_PID=$!

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
sleep 3

# –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞—à–±–æ—Ä–¥
echo "üìä –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞..."
streamlit run simple_dashboard.py --server.port 8501 &
DASHBOARD_PID=$!

# –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo $API_PID > api.pid
echo $DASHBOARD_PID > dashboard.pid

echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
echo "API: http://localhost:8000"
echo "–î–∞—à–±–æ—Ä–¥: http://localhost:8501"
echo ""
echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./stop.sh"
"""
    
    with open(package_dir / "start.sh", "w", encoding="utf-8") as f:
        f.write(start_script)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(package_dir / "start.sh", 0o755)
    
    # –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API
if [ -f api.pid ]; then
    API_PID=$(cat api.pid)
    kill $API_PID 2>/dev/null
    rm api.pid
    echo "API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
if [ -f dashboard.pid ]; then
    DASHBOARD_PID=$(cat dashboard.pid)
    kill $DASHBOARD_PID 2>/dev/null
    rm dashboard.pid
    echo "–î–∞—à–±–æ—Ä–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
pkill -f "python simple_api.py" 2>/dev/null
pkill -f "streamlit run simple_dashboard.py" 2>/dev/null

echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
"""
    
    with open(package_dir / "stop.sh", "w", encoding="utf-8") as f:
        f.write(stop_script)
    
    os.chmod(package_dir / "stop.sh", 0o755)
    
    # –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
if curl -s http://localhost:8000/api/health > /dev/null; then
    echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç (http://localhost:8000)"
else
    echo "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—à–±–æ—Ä–¥
if curl -s http://localhost:8501 > /dev/null; then
    echo "‚úÖ –î–∞—à–±–æ—Ä–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç (http://localhost:8501)"
else
    echo "‚ùå –î–∞—à–±–æ—Ä–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
if pgrep -f "python simple_api.py" > /dev/null; then
    echo "‚úÖ API –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå API –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if pgrep -f "streamlit run simple_dashboard.py" > /dev/null; then
    echo "‚úÖ –î–∞—à–±–æ—Ä–¥ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå –î–∞—à–±–æ—Ä–¥ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
"""
    
    with open(package_dir / "status.sh", "w", encoding="utf-8") as f:
        f.write(status_script)
    
    os.chmod(package_dir / "status.sh", 0o755)

def create_deployment_readme(package_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ README –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    readme_content = """# üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ - –ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

## üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.8+
- pip
- 2GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
- –ü–æ—Ä—Ç—ã 8000 –∏ 8501 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:**
   ```bash
   pip install -r requirements_unified.txt
   ```

2. **–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã:**
   ```bash
   ./start.sh
   ```

3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:**
   ```bash
   ./status.sh
   ```

4. **–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**
   ```bash
   ./stop.sh
   ```

## üåê –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ

- **API:** http://localhost:8000
- **–î–∞—à–±–æ—Ä–¥:** http://localhost:8501
- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API:** http://localhost:8000/docs

## üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### API Endpoints

```bash
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
curl http://localhost:8000/api/statistics

# –ü—Ä–æ–±–ª–µ–º—ã
curl http://localhost:8000/api/problems

# –ò–¥–µ–∏
curl http://localhost:8000/api/ideas

# –°–∏–≥–Ω–∞–ª—ã
curl http://localhost:8000/api/signals

# –ü–æ–∏—Å–∫
curl "http://localhost:8000/api/search?query=–¥–æ—Å—Ç–∞–≤–∫–∞"
```

### –î–∞—à–±–æ—Ä–¥

–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8501 –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞

```
dialogs_rag_system/
‚îú‚îÄ‚îÄ simple_api.py              # API —Å–µ—Ä–≤–µ—Ä
‚îú‚îÄ‚îÄ simple_dashboard.py        # –î–∞—à–±–æ—Ä–¥
‚îú‚îÄ‚îÄ requirements_unified.txt   # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îú‚îÄ‚îÄ start.sh                   # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
‚îú‚îÄ‚îÄ stop.sh                    # –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
‚îú‚îÄ‚îÄ status.sh                  # –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
‚îú‚îÄ‚îÄ app/                       # –ú–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ config/                    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ adapters/                  # –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ migration/                 # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
‚îî‚îÄ‚îÄ quality/                   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
```

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞

1. **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**
   ```bash
   cp .env.example .env
   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª
   ```

2. **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
   - –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: `config/unified_config.yaml`
   - –¢–∞–∫—Å–æ–Ω–æ–º–∏—è: `taxonomy.yaml`

## üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

- **–õ–æ–≥–∏ API:** `logs/api.log`
- **–õ–æ–≥–∏ –¥–∞—à–±–æ—Ä–¥–∞:** `logs/dashboard.log`
- **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:** `./status.sh`

## üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `./status.sh`
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: `./stop.sh && ./start.sh`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ `logs/`

## üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- **–û–°:** Linux, macOS, Windows
- **Python:** 3.8+
- **RAM:** 2GB+
- **–î–∏—Å–∫:** 2GB+
- **–°–µ—Ç—å:** –ü–æ—Ä—Ç—ã 8000, 8501

---

**–í–µ—Ä—Å–∏—è:** 2.0.0  
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** """ + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + """
"""
    
    with open(package_dir / "README_DEPLOYMENT.md", "w", encoding="utf-8") as f:
        f.write(readme_content)

def create_system_snapshot():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    snapshot_file = f"system_snapshot_{timestamp}.json"
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    snapshot = {
        "timestamp": timestamp,
        "system_status": "running",
        "services": {
            "api": {
                "url": "http://localhost:8000",
                "status": "unknown"
            },
            "dashboard": {
                "url": "http://localhost:8501", 
                "status": "unknown"
            }
        },
        "files": {
            "api": "simple_api.py",
            "dashboard": "simple_dashboard.py",
            "requirements": "requirements_unified.txt",
            "makefile": "Makefile_unified"
        },
        "directories": [
            "app", "config", "adapters", "migration", "quality"
        ],
        "artifacts": {
            "comprehensive_results": "artifacts/comprehensive_results.json",
            "aggregate_results": "artifacts/aggregate_results.json",
            "statistics": "artifacts/statistics.json"
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        import requests
        api_response = requests.get("http://localhost:8000/api/health", timeout=5)
        snapshot["services"]["api"]["status"] = "healthy" if api_response.status_code == 200 else "error"
    except:
        snapshot["services"]["api"]["status"] = "unavailable"
    
    try:
        dashboard_response = requests.get("http://localhost:8501", timeout=5)
        snapshot["services"]["dashboard"]["status"] = "healthy" if dashboard_response.status_code == 200 else "error"
    except:
        snapshot["services"]["dashboard"]["status"] = "unavailable"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫
    with open(snapshot_file, "w", encoding="utf-8") as f:
        json.dump(snapshot, f, indent=2, ensure_ascii=False)
    
    logger.info(f"–°–Ω–∏–º–æ–∫ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω: {snapshot_file}")
    return snapshot_file

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    snapshot_file = create_system_snapshot()
    logger.info(f"‚úÖ –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {snapshot_file}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_dir = create_backup()
    logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    package_dir = create_deployment_package()
    logger.info(f"‚úÖ –ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {package_dir}")
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø–∞–∫–µ—Ç–∞
    archive_name = f"dialogs_rag_system_{datetime.now().strftime('%Y%m%d_%H%M%S')}.tar.gz"
    subprocess.run([
        "tar", "-czf", archive_name, "-C", str(package_dir.parent), package_dir.name
    ], check=True)
    
    logger.info(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report = f"""
# üíæ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞

**–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üì¶ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:

1. **–°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è:** {snapshot_file}
2. **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:** {backup_dir}
3. **–ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:** {package_dir}
4. **–ê—Ä—Ö–∏–≤:** {archive_name}

## üöÄ –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:

```bash
# –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤
tar -xzf {archive_name}

# –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd {package_dir.name}

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É
./start.sh
```

## üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

- **API:** http://localhost:8000
- **–î–∞—à–±–æ—Ä–¥:** http://localhost:8501
- **–°—Ç–∞—Ç—É—Å:** –†–∞–±–æ—Ç–∞–µ—Ç

## üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:

- **–ó–∞–ø—É—Å–∫:** `./start.sh`
- **–û—Å—Ç–∞–Ω–æ–≤–∫–∞:** `./stop.sh`
- **–°—Ç–∞—Ç—É—Å:** `./status.sh`

---
–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üéâ
"""
    
    with open("SAVE_REPORT.md", "w", encoding="utf-8") as f:
        f.write(report)
    
    logger.info("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: SAVE_REPORT.md")
    logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    print("\n" + "="*60)
    print("üíæ –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –î–ò–ê–õ–û–ì–û–í –°–û–•–†–ê–ù–ï–ù–ê")
    print("="*60)
    print(f"üì∏ –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {snapshot_file}")
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
    print(f"üì¶ –ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {package_dir}")
    print(f"üóúÔ∏è  –ê—Ä—Ö–∏–≤: {archive_name}")
    print(f"üìã –û—Ç—á–µ—Ç: SAVE_REPORT.md")
    print("\nüåê –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    print("   API: http://localhost:8000")
    print("   –î–∞—à–±–æ—Ä–¥: http://localhost:8501")
    print("\nüöÄ –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ:")
    print(f"   tar -xzf {archive_name}")
    print(f"   cd {package_dir.name}")
    print("   ./start.sh")
    print("="*60)

if __name__ == "__main__":
    main()
