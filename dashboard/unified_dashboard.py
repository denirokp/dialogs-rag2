#!/usr/bin/env python3
"""
Unified Dashboard - –ï–¥–∏–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç legacy, pipeline, enhanced –∏ scaled —Å–∏—Å—Ç–µ–º—ã
"""

import streamlit as st
import requests
import json
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from pathlib import Path
import time
import asyncio
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Unified Dialogs RAG Dashboard",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000"

class UnifiedAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Unified API"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
    
    def _request(self, method: str, endpoint: str, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        url = f"{self.base_url}{endpoint}"
        try:
            response = requests.request(method, url, **kwargs)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"–û—à–∏–±–∫–∞ API: {e}")
            return None
    
    def get_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        return self._request("GET", "/api/health")
    
    def get_quality(self, mode: str = "auto"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
        return self._request("GET", "/api/quality", params={"mode": mode})
    
    def get_summary_themes(self, mode: str = "auto"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–µ–º–∞–º"""
        return self._request("GET", "/api/summary_themes", params={"mode": mode})
    
    def get_summary_subthemes(self, theme: str = None, mode: str = "auto"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–¥—Ç–µ–º–∞–º"""
        params = {"mode": mode}
        if theme:
            params["theme"] = theme
        return self._request("GET", "/api/summary_subthemes", params=params)
    
    def get_index_quotes(self, theme: str = None, subtheme: str = None, page: int = 1, page_size: int = 50, mode: str = "auto"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ü–∏—Ç–∞—Ç"""
        params = {"mode": mode, "page": page, "page_size": page_size}
        if theme:
            params["theme"] = theme
        if subtheme:
            params["subtheme"] = subtheme
        return self._request("GET", "/api/index_quotes", params=params)
    
    def get_cooccurrence(self, top: int = 50, mode: str = "auto"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–º"""
        return self._request("GET", "/api/cooccurrence", params={"mode": mode, "top": top})
    
    def get_system_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        return self._request("GET", "/api/system_info")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
api_client = UnifiedAPIClient(API_BASE_URL)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="color: #2E86AB; margin-bottom: 0.5rem;">üîç Unified Dialogs RAG Dashboard</h1>
        <p style="color: #666; font-size: 1.1rem;">–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
        if st.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", use_container_width=True):
            health = api_client.get_health()
            if health:
                st.success(f"‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω (—Ä–µ–∂–∏–º: {health.get('mode', 'unknown')})")
                st.metric("–£–ø–æ–º–∏–Ω–∞–Ω–∏–π", health.get('mentions_count', 0))
            else:
                st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        st.subheader("üéØ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        mode = st.selectbox(
            "–†–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö",
            options=["auto", "legacy", "pipeline", "enhanced", "scaled"],
            index=0,
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
        if mode != "auto":
            system_info = api_client.get_system_info()
            if system_info and system_info.get("current_mode") == mode:
                st.success(f"‚úÖ –†–µ–∂–∏–º {mode} –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                st.warning(f"‚ö†Ô∏è –†–µ–∂–∏–º {mode} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        filter_theme = st.selectbox(
            "–¢–µ–º–∞",
            options=["(–≤—Å–µ)"] + ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "—Ü–µ–Ω—ã", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "UI/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–ª–æ–≥–∏—Å—Ç–∏–∫–∞/—Å—Ä–æ–∫–∏", "–ø—Ä–æ–¥—É–∫—Ç", "–æ–ø–ª–∞—Ç–∞/–≤–æ–∑–≤—Ä–∞—Ç—ã", "–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ/–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", "–ø—Ä–æ—á–µ–µ"],
            index=0
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.subheader("üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        page_size = st.slider("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", 10, 100, 50)
        show_charts = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True)
        show_details = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏", value=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä –û–±–∑–æ—Ä", "üè∑Ô∏è –¢–µ–º—ã", "üìù –¶–∏—Ç–∞—Ç—ã", "üîó –°–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç—å", "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞"])
    
    with tab1:
        show_overview(mode, show_charts)
    
    with tab2:
        show_themes(mode, filter_theme, show_charts, show_details)
    
    with tab3:
        show_quotes(mode, filter_theme, page_size, show_details)
    
    with tab4:
        show_cooccurrence(mode, show_charts)
    
    with tab5:
        show_system_info()

def show_overview(mode: str, show_charts: bool):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–∑–æ—Ä–æ–º"""
    st.header("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    system_info = api_client.get_system_info()
    if not system_info:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤",
            system_info["statistics"]["total_dialogs"],
            delta=None
        )
    
    with col2:
        st.metric(
            "–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            system_info["statistics"]["total_mentions"],
            delta=None
        )
    
    with col3:
        st.metric(
            "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º",
            system_info["current_mode"],
            delta=None
        )
    
    with col4:
        features = system_info["features"]
        active_features = sum(features.values())
        st.metric(
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
            active_features,
            delta=None
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    st.subheader("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    quality = api_client.get_quality(mode)
    if quality:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            status = "‚úÖ" if quality.get("evidence_100", False) else "‚ùå"
            st.metric("Evidence-100", status)
        
        with col2:
            dedup_rate = quality.get("dedup_rate", 0.0)
            status = "‚úÖ" if dedup_rate <= 0.01 else "‚ùå"
            st.metric("Dedup ‚â§1%", f"{dedup_rate:.3%}", status)
        
        with col3:
            coverage = quality.get("coverage_other_pct", 0.0)
            status = "‚úÖ" if coverage <= 2.0 else "‚ùå"
            st.metric("Coverage ‚â•98%", f"{100-coverage:.1f}%", status)
        
        with col4:
            passed = quality.get("passed", False)
            status = "‚úÖ" if passed else "‚ùå"
            st.metric("DoD Passed", status)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if show_charts:
        st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–µ–º–∞–º")
        themes_data = api_client.get_summary_themes(mode)
        if themes_data and "themes" in themes_data:
            themes_df = pd.DataFrame(themes_data["themes"])
            if not themes_df.empty:
                fig = px.bar(
                    themes_df.head(10), 
                    x="theme", 
                    y="dialogov",
                    title="–¢–æ–ø-10 —Ç–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∏–∞–ª–æ–≥–æ–≤",
                    hover_data=["upominanii", "share_dialogs_pct"]
                )
                st.plotly_chart(fig, use_container_width=True)

def show_themes(mode: str, filter_theme: str, show_charts: bool, show_details: bool):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–µ–º–∞–º–∏ –∏ –ø–æ–¥—Ç–µ–º–∞–º–∏"""
    st.header("üè∑Ô∏è –¢–µ–º—ã –∏ –ø–æ–¥—Ç–µ–º—ã")
    
    # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–º–∞–º
    st.subheader("üìä –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–º–∞–º")
    themes_data = api_client.get_summary_themes(mode)
    if themes_data and "themes" in themes_data:
        themes_df = pd.DataFrame(themes_data["themes"])
        if not themes_df.empty:
            st.dataframe(themes_df, use_container_width=True)
            
            if show_charts:
                col1, col2 = st.columns(2)
                
                with col1:
                    fig1 = px.bar(
                        themes_df.head(10), 
                        x="theme", 
                        y="dialogov",
                        title="–î–∏–∞–ª–æ–≥–æ–≤ –ø–æ —Ç–µ–º–∞–º",
                        hover_data=["upominanii", "share_dialogs_pct"]
                    )
                    st.plotly_chart(fig1, use_container_width=True)
                
                with col2:
                    fig2 = px.pie(
                        themes_df.head(8), 
                        values="dialogov", 
                        names="theme",
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º"
                    )
                    st.plotly_chart(fig2, use_container_width=True)
    
    # –ü–æ–¥—Ç–µ–º—ã
    st.subheader("üîç –ü–æ–¥—Ç–µ–º—ã")
    subthemes_data = api_client.get_summary_subthemes(
        theme=filter_theme if filter_theme != "(–≤—Å–µ)" else None,
        mode=mode
    )
    if subthemes_data and "items" in subthemes_data:
        subthemes_df = pd.DataFrame(subthemes_data["items"])
        if not subthemes_df.empty:
            st.dataframe(subthemes_df.head(50), use_container_width=True)
            
            if show_charts and show_details:
                fig = px.bar(
                    subthemes_df.head(20), 
                    x="subtheme", 
                    y="dialogov",
                    color="theme",
                    title="–¢–æ–ø-20 –ø–æ–¥—Ç–µ–º",
                    hover_data=["upominanii", "share_dialogs_pct"]
                )
                st.plotly_chart(fig, use_container_width=True)

def show_quotes(mode: str, filter_theme: str, page_size: int, show_details: bool):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏"""
    st.header("üìù –ò–Ω–¥–µ–∫—Å —Ü–∏—Ç–∞—Ç")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        theme_filter = filter_theme if filter_theme != "(–≤—Å–µ)" else None
    
    with col2:
        subtheme_filter = st.selectbox(
            "–ü–æ–¥—Ç–µ–º–∞",
            options=["(–≤—Å–µ)"] + ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ", "–Ω–µ —É–¥–∞—ë—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", "–Ω–µ –æ–∫—É–ø–∞–µ—Ç—Å—è", "–≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"],
            index=0
        )
        subtheme_filter = subtheme_filter if subtheme_filter != "(–≤—Å–µ)" else None
    
    with col3:
        page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç
    quotes_data = api_client.get_index_quotes(
        theme=theme_filter,
        subtheme=subtheme_filter,
        page=page,
        page_size=page_size,
        mode=mode
    )
    
    if quotes_data and "items" in quotes_data:
        quotes_df = pd.DataFrame(quotes_data["items"])
        if not quotes_df.empty:
            st.dataframe(quotes_df, use_container_width=True)
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            if quotes_data.get("next_page"):
                st.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {page + 1 if quotes_data.get('next_page') else page}")
            else:
                st.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (–ø–æ—Å–ª–µ–¥–Ω—è—è)")
            
            if show_details:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º
                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏—Ç–∞—Ç")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç", len(quotes_df))
                
                with col2:
                    avg_confidence = quotes_df["confidence"].mean() if "confidence" in quotes_df.columns else 0
                    st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")
                
                with col3:
                    unique_themes = quotes_df["theme"].nunique()
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º", unique_themes)
        else:
            st.info("–¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã")

def show_cooccurrence(mode: str, show_charts: bool):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç—å—é —Ç–µ–º"""
    st.header("üîó –°–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç—å —Ç–µ–º")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        top_n = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –ø–∞—Ä", 10, 100, 50)
    
    with col2:
        show_heatmap = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É", value=True)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    cooccurrence_data = api_client.get_cooccurrence(top=top_n, mode=mode)
    if cooccurrence_data and "items" in cooccurrence_data:
        co_df = pd.DataFrame(cooccurrence_data["items"])
        if not co_df.empty:
            st.dataframe(co_df, use_container_width=True)
            
            if show_charts and show_heatmap:
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏
                pivot_df = co_df.pivot_table(
                    index="theme_a", 
                    columns="theme_b", 
                    values="cnt", 
                    fill_value=0
                )
                
                if not pivot_df.empty:
                    fig = px.imshow(
                        pivot_df, 
                        aspect="auto", 
                        title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–º",
                        color_continuous_scale="Blues"
                    )
                    st.plotly_chart(fig, use_container_width=True)
            
            if show_charts:
                # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø –ø–∞—Ä
                fig = px.bar(
                    co_df.head(20), 
                    x="cnt", 
                    y="theme_a",
                    color="theme_b",
                    title="–¢–æ–ø-20 –ø–∞—Ä —Å–æ–≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Ç–µ–º",
                    orientation="h"
                )
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ —Å–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏")

def show_system_info():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
    st.header("‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    system_info = api_client.get_system_info()
    if not system_info:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader("üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º", system_info["current_mode"])
        st.metric("–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤", system_info["statistics"]["total_dialogs"])
        st.metric("–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π", system_info["statistics"]["total_mentions"])
    
    with col2:
        st.metric("–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤", len(system_info["available_modes"]))
        features = system_info["features"]
        active_features = sum(features.values())
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", active_features)
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    st.subheader("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã")
    modes_df = pd.DataFrame([
        {"–†–µ–∂–∏–º": mode, "–°—Ç–∞—Ç—É—Å": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if mode == system_info["current_mode"] else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
        for mode in system_info["available_modes"]
    ])
    st.dataframe(modes_df, use_container_width=True)
    
    # –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    st.subheader("üîß –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
    features_df = pd.DataFrame([
        {"–§—É–Ω–∫—Ü–∏—è": feature, "–°—Ç–∞—Ç—É—Å": "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if status else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"}
        for feature, status in system_info["features"].items()
    ])
    st.dataframe(features_df, use_container_width=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    st.subheader("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    quality = api_client.get_quality()
    if quality:
        quality_df = pd.DataFrame([
            {"–ú–µ—Ç—Ä–∏–∫–∞": "Evidence-100", "–ó–Ω–∞—á–µ–Ω–∏–µ": "‚úÖ" if quality.get("evidence_100", False) else "‚ùå"},
            {"–ú–µ—Ç—Ä–∏–∫–∞": "Dedup ‚â§1%", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{quality.get('dedup_rate', 0.0):.3%}"},
            {"–ú–µ—Ç—Ä–∏–∫–∞": "Coverage ‚â•98%", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{100-quality.get('coverage_other_pct', 0.0):.1f}%"},
            {"–ú–µ—Ç—Ä–∏–∫–∞": "DoD Passed", "–ó–Ω–∞—á–µ–Ω–∏–µ": "‚úÖ" if quality.get("passed", False) else "‚ùå"}
        ])
        st.dataframe(quality_df, use_container_width=True)

if __name__ == "__main__":
    main()
