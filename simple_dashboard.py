#!/usr/bin/env python3
"""
Simple Dashboard –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
"""

import streamlit as st
import requests
import json
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Dialogs Analysis Dashboard",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000"

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API"""
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = requests.get(f"{API_BASE_URL}/api/statistics").json()
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        problems = requests.get(f"{API_BASE_URL}/api/problems").json()
        
        # –ò–¥–µ–∏
        ideas = requests.get(f"{API_BASE_URL}/api/ideas").json()
        
        # –°–∏–≥–Ω–∞–ª—ã
        signals = requests.get(f"{API_BASE_URL}/api/signals").json()
        
        return {
            "stats": stats,
            "problems": problems,
            "ideas": ideas,
            "signals": signals
        }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="color: #2E86AB; margin-bottom: 0.5rem;">üîç Dialogs Analysis Dashboard</h1>
        <p style="color: #666; font-size: 1.1rem;">–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()
    if not data:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        stats = data["stats"]
        st.metric("–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤", stats["total_dialogs"])
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{stats['success_rate']:.1%}")
        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", f"{stats['quality_score']:.1%}")
        st.metric("–ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", f"{stats['business_relevance']:.1%}")
        st.metric("–î–µ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", f"{stats['actionability']:.1%}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±–∑–æ—Ä", "üö´ –ü—Ä–æ–±–ª–µ–º—ã", "üí° –ò–¥–µ–∏", "üì° –°–∏–≥–Ω–∞–ª—ã"])
    
    with tab1:
        show_overview(data)
    
    with tab2:
        show_problems(data)
    
    with tab3:
        show_ideas(data)
    
    with tab4:
        show_signals(data)

def show_overview(data):
    """–û–±–∑–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    st.header("üìä –û–±—â–∏–π –æ–±–∑–æ—Ä")
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü—Ä–æ–±–ª–µ–º—ã", data["problems"]["total_problems"])
    
    with col2:
        st.metric("–ò–¥–µ–∏", data["ideas"]["total_ideas"])
    
    with col3:
        st.metric("–°–∏–≥–Ω–∞–ª—ã", data["signals"]["total_signals"])
    
    with col4:
        total_entities = data["problems"]["total_problems"] + data["ideas"]["total_ideas"] + data["signals"]["total_signals"]
        st.metric("–í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π", total_entities)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
    entity_data = {
        "–¢–∏–ø": ["–ü—Ä–æ–±–ª–µ–º—ã", "–ò–¥–µ–∏", "–°–∏–≥–Ω–∞–ª—ã"],
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": [
            data["problems"]["total_problems"],
            data["ideas"]["total_ideas"],
            data["signals"]["total_signals"]
        ]
    }
    
    df_entities = pd.DataFrame(entity_data)
    
    fig = px.pie(
        df_entities, 
        values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
        names="–¢–∏–ø",
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π",
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    st.plotly_chart(fig, use_container_width=True)

def show_problems(data):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏"""
    st.header("üö´ –ü—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    problems = data["problems"]["problems"]
    
    if not problems:
        st.info("–ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–æ–±–ª–µ–º
    problems_data = []
    for problem in problems:
        problems_data.append({
            "–ù–∞–∑–≤–∞–Ω–∏–µ": problem["name"],
            "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π": problem["mentions_abs"],
            "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–æ–≤": f"{problem['mentions_pct_of_D']:.1f}%",
            "–î–∏–∞–ª–æ–≥–∏": len(problem["dialog_ids"])
        })
    
    df_problems = pd.DataFrame(problems_data)
    st.dataframe(df_problems, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–±–ª–µ–º
    fig = px.bar(
        df_problems, 
        x="–ù–∞–∑–≤–∞–Ω–∏–µ", 
        y="–£–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–±–ª–µ–º",
        color="–£–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        color_continuous_scale="Reds"
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º–µ
    st.subheader("üìù –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º")
    
    for i, problem in enumerate(problems):
        with st.expander(f"–ü—Ä–æ–±–ª–µ–º–∞ {i+1}: {problem['name']}"):
            st.write(f"**–£–ø–æ–º–∏–Ω–∞–Ω–∏–π:** {problem['mentions_abs']} ({problem['mentions_pct_of_D']:.1f}% –¥–∏–∞–ª–æ–≥–æ–≤)")
            st.write(f"**–î–∏–∞–ª–æ–≥–∏:** {', '.join(problem['dialog_ids'])}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–±–ª–µ–º—ã
            st.write("**–í–∞—Ä–∏–∞–Ω—Ç—ã:**")
            for variant in problem["variants"]:
                st.write(f"- {variant['text']} ({variant['count_abs']} —Ä–∞–∑)")
            
            # –¶–∏—Ç–∞—Ç—ã
            st.write("**–¶–∏—Ç–∞—Ç—ã:**")
            for quote in problem["quotes"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ü–∏—Ç–∞—Ç—ã
                st.write(f"*\"{quote['quote'][:200]}{'...' if len(quote['quote']) > 200 else ''}\"*")
                st.write(f"*‚Äî –î–∏–∞–ª–æ–≥ {quote['dialog_id']}*")
                st.write("---")

def show_ideas(data):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–¥–µ—è–º–∏"""
    st.header("üí° –ò–¥–µ–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    ideas = data["ideas"]["ideas"]
    
    if not ideas:
        st.info("–ò–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∏–¥–µ–π
    ideas_data = []
    for idea in ideas:
        ideas_data.append({
            "–ù–∞–∑–≤–∞–Ω–∏–µ": idea["name"],
            "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π": idea["mentions_abs"],
            "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–æ–≤": f"{idea['mentions_pct_of_D']:.1f}%",
            "–î–∏–∞–ª–æ–≥–∏": len(idea["dialog_ids"])
        })
    
    df_ideas = pd.DataFrame(ideas_data)
    st.dataframe(df_ideas, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∏–¥–µ–π
    fig = px.bar(
        df_ideas, 
        x="–ù–∞–∑–≤–∞–Ω–∏–µ", 
        y="–£–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–¥–µ–π",
        color="–£–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        color_continuous_scale="Greens"
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –∏–¥–µ–µ
    st.subheader("üìù –î–µ—Ç–∞–ª–∏ –∏–¥–µ–π")
    
    for i, idea in enumerate(ideas):
        with st.expander(f"–ò–¥–µ—è {i+1}: {idea['name']}"):
            st.write(f"**–£–ø–æ–º–∏–Ω–∞–Ω–∏–π:** {idea['mentions_abs']} ({idea['mentions_pct_of_D']:.1f}% –¥–∏–∞–ª–æ–≥–æ–≤)")
            st.write(f"**–î–∏–∞–ª–æ–≥–∏:** {', '.join(idea['dialog_ids'])}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–¥–µ–∏
            st.write("**–í–∞—Ä–∏–∞–Ω—Ç—ã:**")
            for variant in idea["variants"]:
                st.write(f"- {variant['text']} ({variant['count_abs']} —Ä–∞–∑)")
            
            # –¶–∏—Ç–∞—Ç—ã
            st.write("**–¶–∏—Ç–∞—Ç—ã:**")
            for quote in idea["quotes"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ü–∏—Ç–∞—Ç—ã
                st.write(f"*\"{quote['quote'][:200]}{'...' if len(quote['quote']) > 200 else ''}\"*")
                st.write(f"*‚Äî –î–∏–∞–ª–æ–≥ {quote['dialog_id']}*")
                st.write("---")

def show_signals(data):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    st.header("üì° –°–∏–≥–Ω–∞–ª—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    signals = data["signals"]["signals"]
    
    if not signals:
        st.info("–°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    signals_data = []
    for signal in signals:
        signals_data.append({
            "–ù–∞–∑–≤–∞–Ω–∏–µ": signal["name"],
            "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π": signal["mentions_abs"],
            "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–æ–≤": f"{signal['mentions_pct_of_D']:.1f}%",
            "–î–∏–∞–ª–æ–≥–∏": len(signal["dialog_ids"])
        })
    
    df_signals = pd.DataFrame(signals_data)
    st.dataframe(df_signals, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    fig = px.bar(
        df_signals, 
        x="–ù–∞–∑–≤–∞–Ω–∏–µ", 
        y="–£–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤",
        color="–£–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        color_continuous_scale="Blues"
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–≥–Ω–∞–ª—É
    st.subheader("üìù –î–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    for i, signal in enumerate(signals):
        with st.expander(f"–°–∏–≥–Ω–∞–ª {i+1}: {signal['name']}"):
            st.write(f"**–£–ø–æ–º–∏–Ω–∞–Ω–∏–π:** {signal['mentions_abs']} ({signal['mentions_pct_of_D']:.1f}% –¥–∏–∞–ª–æ–≥–æ–≤)")
            st.write(f"**–î–∏–∞–ª–æ–≥–∏:** {', '.join(signal['dialog_ids'])}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–≥–Ω–∞–ª–∞
            st.write("**–í–∞—Ä–∏–∞–Ω—Ç—ã:**")
            for variant in signal["variants"]:
                st.write(f"- {variant['text']} ({variant['count_abs']} —Ä–∞–∑)")
            
            # –¶–∏—Ç–∞—Ç—ã
            st.write("**–¶–∏—Ç–∞—Ç—ã:**")
            for quote in signal["quotes"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ü–∏—Ç–∞—Ç—ã
                st.write(f"*\"{quote['quote'][:200]}{'...' if len(quote['quote']) > 200 else ''}\"*")
                st.write(f"*‚Äî –î–∏–∞–ª–æ–≥ {quote['dialog_id']}*")
                st.write("---")

if __name__ == "__main__":
    main()
