#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ DIALOGS RAG SYSTEM
–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import argparse
import logging
import sys
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/main.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    DIALOGS RAG SYSTEM                        ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  üéØ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –±–∞—Ä—å–µ—Ä–æ–≤, –∏–¥–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤  ‚ïë
    ‚ïë  üß† –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è                                ‚ïë
    ‚ïë  üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è                         ‚ïë
    ‚ïë  üîß –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞                           ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def run_full_pipeline(input_file: str, config_file: str = "config.json"):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        from pipeline_manager import PipelineManager, PipelineConfig
        
        config = PipelineConfig()
        manager = PipelineManager(config)
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
        success = manager.run_pipeline(["1", "1.5", "2", "3", "4", "5", "6", "7"])
        
        if success:
            logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False

def run_comprehensive_pipeline(input_file: str, config_file: str = "config.json"):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ DoD –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ DoD –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        from comprehensive_dod_pipeline import main as comprehensive_main
        
        # –ó–∞–ø—É—Å–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        sys.argv = ['comprehensive_dod_pipeline.py', '--input', input_file, '--config', config_file]
        asyncio.run(comprehensive_main())
        
        logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π DoD –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False

def run_enhanced_pipeline(input_file: str, config_file: str = "config.json"):
    """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º"""
    logger.info("üß† –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º...")
    
    try:
        from enhanced_main import main as enhanced_main
        
        # –ó–∞–ø—É—Å–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        sys.argv = ['enhanced_main.py', '--input', input_file, '--config', config_file, '--enable-all']
        asyncio.run(enhanced_main())
        
        logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False

def run_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        from api.pipeline_api import app
        import uvicorn
        
        uvicorn.run(app, host="0.0.0.0", port=8000)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def run_dashboard():
    """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
    logger.info("üìä –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    try:
        from dashboard.pipeline_dashboard import main as dashboard_main
        dashboard_main()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        from final_system_test import main as test_main
        test_main()
        
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Dialogs RAG System - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª')
    parser.add_argument('--mode', '-m', 
                       choices=['full', 'comprehensive', 'enhanced', 'api', 'dashboard', 'test'],
                       default='comprehensive',
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--input', '-i', 
                       default='data/dialogs.xlsx',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏')
    parser.add_argument('--config', '-c', 
                       default='config.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞
    print_banner()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    Path('logs').mkdir(exist_ok=True)
    Path('artifacts').mkdir(exist_ok=True)
    Path('reports').mkdir(exist_ok=True)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.mode == 'full':
        success = run_full_pipeline(args.input, args.config)
    elif args.mode == 'comprehensive':
        success = run_comprehensive_pipeline(args.input, args.config)
    elif args.mode == 'enhanced':
        success = run_enhanced_pipeline(args.input, args.config)
    elif args.mode == 'api':
        run_api_server()
        return
    elif args.mode == 'dashboard':
        run_dashboard()
        return
    elif args.mode == 'test':
        success = run_tests()
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {args.mode}")
        return
    
    if success:
        logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
