#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Dialogs RAG –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import os
import subprocess
import sys
import time

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=300)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"–í—ã–≤–æ–¥: {result.stdout.strip()}")
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - —Ç–∞–π–º–∞—É—Ç (5 –º–∏–Ω—É—Ç)")
        return False
    except Exception as e:
        print(f"üí• {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False
    
    return True

def main():
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Dialogs RAG")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    data_file = "data/input/dialogs.xlsx"
    if not os.path.exists(data_file):
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: dialog_id, raw_text")
        print("–ü—Ä–∏–º–µ—Ä raw_text: 'client: —Ö–æ—á—É –≤–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\\noperator: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["BATCH_ID"] = "test-2025-01-14"
    os.environ["N_DIALOGS"] = "1000"  # –ú–µ–Ω—å—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    os.environ["EXTRACT_MODE"] = "RULES"
    os.environ["DUCKDB_PATH"] = "data/test_rag.duckdb"
    os.environ["REQUIRE_QUALITY_PASS"] = "true"
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
    commands = [
        ("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        ("make ingest BATCH=test-2025-01-14", "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("make extract BATCH=test-2025-01-14", "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π"),
        ("make normalize BATCH=test-2025-01-14", "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"),
        ("make dedup BATCH=test-2025-01-14", "–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è"),
        ("make aggregate BATCH=test-2025-01-14 N_DIALOGS=1000", "–ê–≥—Ä–µ–≥–∞—Ü–∏—è"),
        ("make quality BATCH=test-2025-01-14 N_DIALOGS=1000", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"),
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    for cmd, desc in commands:
        if not run_command(cmd, desc):
            print(f"\n‚ùå –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ: {desc}")
            return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API –≤ —Ñ–æ–Ω–µ
    print(f"\nüåê –ó–∞–ø—É—Å–∫ API...")
    api_process = subprocess.Popen([
        sys.executable, "-m", "uvicorn", "api.main:app", 
        "--host", "0.0.0.0", "--port", "8000"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
    time.sleep(3)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_commands = [
        ("curl -s http://localhost:8000/api/quality", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"),
        ("curl -s http://localhost:8000/api/summary_themes", "–°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–º–∞–º"),
        ("curl -s 'http://localhost:8000/api/index_quotes?page=1&page_size=5'", "–ò–Ω–¥–µ–∫—Å —Ü–∏—Ç–∞—Ç"),
    ]
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    for cmd, desc in api_commands:
        if not run_command(cmd, desc):
            print(f"‚ö†Ô∏è  API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {desc}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API
    api_process.terminate()
    api_process.wait()
    
    print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/warehouse/")
    print(f"üîç –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: make api")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

