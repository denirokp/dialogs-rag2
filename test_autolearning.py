#!/usr/bin/env python3
"""
üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–û–ë–£–ß–ï–ù–ò–Ø
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from enhanced.continuous_learning import ContinuousLearningSystem
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_autolearning():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è"""
    logger.info("üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        "openai_api_key": "test-key",
        "learning": {
            "min_quality_score": 0.5,
            "min_examples_for_update": 5,
            "pattern_confidence_threshold": 0.7
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
    learning_system = ContinuousLearningSystem(config)
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    test_examples = [
        {
            "dialog": "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ",
            "extracted_entities": {
                "problems": ["–ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"],
                "quotes": ["–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ"]
            },
            "quality_score": 0.85,
            "source": "test"
        },
        {
            "dialog": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ",
            "extracted_entities": {
                "problems": ["—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω", "–±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ"],
                "quotes": ["–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ"]
            },
            "quality_score": 0.90,
            "source": "test"
        },
        {
            "dialog": "–û–±—Ä–∞—â–∞–ª—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ",
            "extracted_entities": {
                "problems": ["–Ω–µ –ø–æ–º–æ–≥–ª–æ"],
                "quotes": ["–û–±—Ä–∞—â–∞–ª—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ"]
            },
            "quality_score": 0.75,
            "source": "test"
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
    for example in test_examples:
        learning_system.add_learning_example(
            dialog=example["dialog"],
            extracted_entities=example["extracted_entities"],
            quality_score=example["quality_score"],
            source=example["source"]
        )
    
    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_examples)} –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã
    assert len(learning_system.learning_examples) == len(test_examples), "–ù–µ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –æ–±—É—á–µ–Ω–∏—è
    insights = learning_system.get_learning_insights()
    logger.info(f"üìä –ò–Ω—Å–∞–π—Ç—ã –æ–±—É—á–µ–Ω–∏—è: {insights}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    patterns = learning_system.learned_patterns
    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
    effectiveness = learning_system._calculate_learning_effectiveness()
    logger.info(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {effectiveness:.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É
    test_file = "test_learning_data.json"
    learning_system.save_learning_data(test_file)
    logger.info("üíæ –î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    new_learning_system = ContinuousLearningSystem(config)
    new_learning_system.load_learning_data(test_file)
    
    assert len(new_learning_system.learning_examples) == len(test_examples), "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –û—á–∏—Å—Ç–∫–∞
    Path(test_file).unlink(missing_ok=True)
    
    logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_learning_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–π–ø–ª–∞–π–Ω–æ–º"""
    logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è —Å –ø–∞–π–ø–ª–∞–π–Ω–æ–º...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    from comprehensive_dod_pipeline import ComprehensiveDoDPipeline
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        "openai_api_key": "test-key",
        "processing": {
            "enable_continuous_learning": True,
            "enable_autocorrection": False,
            "enable_adaptive_prompts": False,
            "enable_monitoring": False,
            "enable_scaling": False,
            "quality_threshold": 0.7,
            "max_dialogs_per_batch": 1000,
            "auto_save_results": True,
            "output_directory": "test_results"
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = ComprehensiveDoDPipeline(config_dict=config)
    logger.info("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —Å –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    assert pipeline.learning_system is not None, "–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è...")
    
    try:
        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
        test_autolearning()
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        test_learning_integration()
        
        print("\n" + "="*60)
        print("üß† –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–û–ë–£–ß–ï–ù–ò–Ø")
        print("="*60)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞–π–ø–ª–∞–π–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("="*60)
        print("üéâ –ê–í–¢–û–û–ë–£–ß–ï–ù–ò–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–û!")
        print("="*60)
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    main()
